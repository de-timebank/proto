syntax = "proto3";
package timebank.servicerequest;

import "misc.proto";
import "collection/rating.proto";
import "user.proto";

service ServiceRequest {
    rpc create (Create.Request) returns (Create.Response);
    rpc get (Get.Request) returns (Get.Response);
    rpc getById (GetById.Request) returns (GetById.Response);
    // allow to filter by location, category, etc.
    rpc getAvailable (GetAvailable.Request) returns (GetAvailable.Response);
    rpc update (Update.Request) returns (Update.Response);
    rpc delete (Delete.Request) returns (Delete.Response);
    rpc applyProvider (ApplyProvider.Request) returns (ApplyProvider.Response);
    rpc selectProvider (SelectProvider.Request) returns (SelectProvider.Response);
    rpc startService (StartService.Request) returns (StartService.Response);
    rpc completeService (CompleteService.Request) returns (CompleteService.Response);
}

message ServiceRequestData {    
    message Details {
        string title = 1;
        string description = 2;
    }
    
    message Location {
        message Coordinate {
            string latitude = 1;
            string longitude = 2;
        }

        string name = 1;
        Coordinate coordinate = 2;
    }

    enum State {
        // The default state when the service request is first created
        PENDING = 0;
        // When the service requestor has chosen a provider from the list of applicants
        ACCEPTED = 1;
        // When the service requestor has started the job (eg by clicking the start button)
        ONGOING = 2;
        // After the job has been completed either by being triggered manually by the requestor or if the time limit is up
        COMPLETED = 3;
        // Reserved
        ABORTED = 4;
    }

    string id = 1;
    string requestor = 2;
    optional string provider = 3;
    Location location = 4;
    State state = 5;
    string title = 6;
    string description = 7;
    repeated string media_attachments = 8;
    float rate = 9;
    repeated string applicants = 10;
    string created_at = 11;
    string updated_at = 12;
    optional string completed_at = 13;
    string category = 14;
    string started_at = 15;
    float time_limit = 16;
    optional float actual_payment = 17;
    string date = 18;
} 

message Create {
    message NewServiceRequestData {
        ServiceRequestData.Details details = 1;
        ServiceRequestData.Location location = 2;
        float rate = 3;
        repeated string media_attachments = 4;
        string category = 5;
        float time_limit = 6;
        string date = 7;
    }

    message Request {
        NewServiceRequestData request_data = 1;
        string requestor = 2;
    }

    message Response {
        ServiceRequestData request = 1;
    }
}

message Delete {
    message Request {
        string request_id = 1;
    }

    message Response {
    }
}

message Get {
    message Request {
        string key = 1;
        string value = 2;
    }
    
    message Response {
        repeated ServiceRequestData requests = 1;
    }
}

message GetById {
    message Request {
        string request_id = 1;
    }

    message Response {
        ServiceRequestData request = 1;
        timebank.user.UserProfile requestor = 2;
        timebank.user.UserProfile provider = 3;
    }
}

message Update {
    message Request {
        string request_id = 1;
        string body = 2;
    }

    message Response {
        ServiceRequestData request = 1;
    }
}

message CompleteService {
    message Request {
        string request_id = 1;
        string user_id = 2;
    }

    message Response {
    }
}

message ApplyProvider {
    message Request {
        string request_id = 1;
        string provider = 2;
    }

    message Response {
    }
}

message SelectProvider {
    message Request {
        string request_id = 1;
        string provider = 2;
        string caller = 3;
    }

    message Response {
    }
}

message GetAvailable {
    message Request {
        misc.Filter filter = 1;
        misc.Page page = 2;
    }

    message Response {
        repeated ServiceRequestData requests = 1;
    }
}

message StartService {
    message Request {
        string request_id = 1;
        string user_id = 2;
    }

    message Response {
    }
}